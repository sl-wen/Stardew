# 状态基类
# 所有玩家状态的基类，定义了状态的基本生命周期方法
# 使用模板方法模式，子类通过重写虚方法实现具体状态逻辑
# 每个状态代表玩家的一种行为模式，如移动、攻击、使用工具等
extends Node  # 继承自Node，可以作为场景树的节点使用
class_name State  # 定义状态基类的类名

## 状态转换信号
# 当需要切换状态时发出此信号
# @param state_name: 要切换到的状态名称，例如"Idle"、"Move"、"Attack"等
@warning_ignore("unused_signal")  # 忽略未使用信号的警告，因为信号可能在子类中被使用
signal transition_to(state_name:String)

## 进入状态（虚方法）
# 当玩家进入此状态时调用
# 通常用于初始化状态、播放进入动画等一次性操作
# 循环播放的动画应该在_physics_update中处理，避免重复初始化
func _enter():
	# pass是GDScript的空语句，表示这个方法在基类中不执行任何操作
	# 子类应该重写此方法来实现具体的进入逻辑
	pass

## 退出状态（虚方法）
# 当玩家离开此状态时调用
# 通常用于清理状态、停止动画、移除效果等清理工作
# 确保状态切换时不会遗留任何副作用
func _exit():
	# 基类中的退出方法为空实现
	# 子类可以重写此方法来执行状态退出时的清理逻辑
	pass

## 物理帧更新（虚方法）
# 每物理帧调用，用于状态的核心逻辑
# 包括：移动计算、状态转换条件判断、持续动画播放等
# 物理帧通常比渲染帧更少（默认60FPS），用于物理相关计算
# @param delta: 物理帧间隔时间，单位为秒
func _physics_update(delta):
	# 基类中的物理更新方法为空实现
	# 子类应该重写此方法来实现状态的核心逻辑
	pass

## 帧更新（虚方法）
# 每帧调用，通常用于粒子特效、UI更新等不需要物理计算的操作
# 渲染帧通常比物理帧更多（取决于显示器刷新率），适合视觉效果更新
# @param delta: 帧间隔时间，单位为秒
func _update(delta):
	# 基类中的帧更新方法为空实现
	# 子类可以重写此方法来处理不需要物理计算的更新逻辑
	pass

## 更新动画（虚方法）
# 执行对应状态的动画逻辑
# 通常在_physics_update中调用以确保动画与物理更新同步
# 将动画逻辑单独提取出来，便于状态间的动画复用和维护
func _update_animation():
	# 基类中的动画更新方法为空实现
	# 子类应该重写此方法来实现具体的动画控制逻辑
	pass
